# This workflow can be manually triggered and will upload an Android .apk or
# .aab (Android App Bundle) file to the Google Play Console
name: Publish Play Store

on:
  workflow_dispatch:
    inputs:
      track:
        description: 'The track in which you want to assign the uploaded app. Default: internal. Possible: alpha, beta, internal, production.'
        required: false
        default: 'internal'
      status:
        description: 'Release status. This can be set to draft to complete the release at some other time. Default: completed. Possible: completed, inProgress, draft, halted.'
        required: false
        default: 'completed'

env:
  GOOGLE_SERVICES_PATH: android/app/google-services.json
  KEYSTORE_PATH: android/app/litten.keystore
  KEYSTORE_PROPERTIES_PATH: android/keystore.properties
  OUTPUT_PATH: android/app/build/outputs/bundle/release/app-release.aab
  SECURE_PROPERTIES_PATH: android/secure.properties
  SERVICE_ACCOUNT_PATH: android/service-account.json
  WHATS_NEW_PATH: dist/whatsnew

jobs:
  publish:
    environment: production
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GH_PAT }}
        ref: 'main'
    - name: Use Node.js v16 (LTS)
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    - name: Install dependencies
      run: |
        yarn --frozen-lockfile

    - name: Create .env file
      run: cp .env.example .env

    - name: Create secure.properties
      run: |
        echo "${{ secrets.ANDROID_SECURE_PROPERTIES }}" | base64 --decode > ${{ env.SECURE_PROPERTIES_PATH }}

    - name: Create service-account.json
      run: |
        echo "${{ secrets.ANDROID_SERVICE_ACCOUNT_JSON }}" | base64 --decode > ${{ env.SERVICE_ACCOUNT_PATH }}

    - name: Create google-services.json
      run: |
        echo "${{ secrets.ANDROID_GOOGLE_SERVICES }}" | base64 --decode > ${{ env.GOOGLE_SERVICES_PATH }}

    - name: Create keystore file
      run: |
        echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > ${{ env.KEYSTORE_PATH }}

    - name: Create keystore properties
      run: |
        echo "LITTEN_UPLOAD_STORE_FILE=litten.keystore" > ${{ env.KEYSTORE_PROPERTIES_PATH }}
    - name: Add keystore key alias
      run: |
        echo "LITTEN_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_SIGNING_ALIAS }}" >> ${{ env.KEYSTORE_PROPERTIES_PATH }}
    - name: Add keystore password
      run: |
        echo "LITTEN_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_SIGNING_STORE_PASSWORD }}" >> ${{ env.KEYSTORE_PROPERTIES_PATH }}
    - name: Create keystore key password
      run: |
        echo "LITTEN_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_SIGNING_KEY_PASSWORD }}" >> ${{ env.KEYSTORE_PROPERTIES_PATH }}

    - name: Cache Gradle Wrapper
      uses: actions/cache@v3
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('android/gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-caches-

    - name: Make Gradlew Executable
      run: |
        cd android && chmod +x ./gradlew

    - name: Build Android App Bundle
      run: |
        cd android && ./gradlew bundleRelease --no-daemon
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        JIRA_API_KEY: ${{ secrets.JIRA_API_KEY }}
        JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Upload To Play Store
      uses: r0adkll/upload-google-play@v1.0.19
      with:
        serviceAccountJson: ${{ env.SERVICE_ACCOUNT_PATH }}
        packageName: com.litten
        releaseFiles: ${{ env.OUTPUT_PATH }}
        whatsNewDirectory: ${{ env.WHATS_NEW_PATH }}
        track: ${{ github.event.inputs.track }}
        status: ${{ github.event.inputs.status }}
